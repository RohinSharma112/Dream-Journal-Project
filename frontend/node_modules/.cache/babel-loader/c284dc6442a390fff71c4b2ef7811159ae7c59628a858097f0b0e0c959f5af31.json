{"ast":null,"code":"import { url } from \"../Constant\";\nexport const appUserLogin = async userLogin => {\n  try {\n    const response = await fetch(`${url}/user/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username: userLogin.username,\n        password: userLogin.password\n      })\n    });\n    const data = await response.json();\n    console.log(data.body);\n    return {\n      success: data.body.success,\n      message: data.body.message,\n      user_id: data.body.user_id\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: 'Error connecting to Server.'\n    };\n  }\n};\nexport const appUserSignup = async userSignup => {\n  try {\n    const response = await fetch(`${url}/user/signup`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: userSignup.uname,\n        username: userSignup.username,\n        email: userSignup.email,\n        password: userSignup.password\n      })\n    });\n    const data = await response.json();\n    return {\n      success: data.body.success,\n      message: data.body.message\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: 'Error connecting to Server.'\n    };\n  }\n};\nexport const appDreamEntry = async dreamData => {\n  try {\n    const response = await fetch(`${url}/dreams/create-dream-entry`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user_id: dreamData.user_id,\n        dream_title: dreamData.dream_title,\n        dream_date: dreamData.dream_date,\n        dream_description: dreamData.dream_description,\n        dream_tag: dreamData.dream_tag\n      })\n    });\n    const data = await response.json();\n    return {\n      success: data.body.success,\n      message: data.body.message\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: 'Error connecting to Server.'\n    };\n  }\n};\nexport const getDreamLogs = async userID => {\n  try {\n    console.log(userID);\n    const response = await fetch(`${url}/dreams/view-dream-logs`, {\n      method: 'Post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user_id: userID\n      })\n    });\n    const data = await response.json();\n    return {\n      dreams: data.body.dreams\n    };\n  } catch (error) {\n    console.log(error);\n    return {\n      dreams: []\n    };\n  }\n};\nexport const getDreamById = async dream_id => {\n  try {\n    const response = await fetch(`${url}/dreams/dream/${dream_id}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n    console.log(data);\n    return {\n      dream: data.dream\n    };\n  } catch (error) {\n    console.log(error);\n    return {\n      event: null\n    };\n  }\n};\nexport const createEntry = async dreamData => {\n  try {\n    console.log(dreamData.tag);\n    const response = await fetch(`${url}/dreams/create-dream-entry`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user_id: dreamData.user_id,\n        dream_title: dreamData.title,\n        dream_date: dreamData.date,\n        dream_description: dreamData.description,\n        dream_tag: dreamData.tag\n      })\n    });\n    const data = await response.json();\n    console.log(data.body);\n    return {\n      success: data.body.success,\n      message: data.body.message\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: 'Error connecting to Server.'\n    };\n  }\n};\nexport const getText = async ImgData => {\n  try {\n    const response = await fetch(`${url}/img-to-text`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        image: ImgData\n      })\n    });\n    const data = await response.json();\n    console.log(data.body.detectedText);\n    return {\n      text: data.body.detectedText\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: 'Error connecting to Server.'\n    };\n  }\n};\nexport const DesiredDateformat = inputDate => {\n  const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  const [year, month, day] = inputDate.split('-');\n  const monthName = monthNames[parseInt(month, 10) - 1];\n  return `${day} ${monthName} ${year}`;\n};\n_c = DesiredDateformat;\nvar _c;\n$RefreshReg$(_c, \"DesiredDateformat\");","map":{"version":3,"names":["url","appUserLogin","userLogin","response","fetch","method","headers","body","JSON","stringify","username","password","data","json","console","log","success","message","user_id","error","appUserSignup","userSignup","name","uname","email","appDreamEntry","dreamData","dream_title","dream_date","dream_description","dream_tag","getDreamLogs","userID","dreams","getDreamById","dream_id","dream","event","createEntry","tag","title","date","description","getText","ImgData","image","detectedText","text","DesiredDateformat","inputDate","monthNames","year","month","day","split","monthName","parseInt","_c","$RefreshReg$"],"sources":["C:/Users/sharm/OneDrive/Desktop/Cloud_Computing/term-assignment/frontend/src/services/dreams.js"],"sourcesContent":["import {url} from \"../Constant\";\r\n\r\nexport const appUserLogin = async (userLogin) => {\r\n    try {\r\n        const response = await fetch(`${url}/user/login`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                username: userLogin.username,\r\n                password: userLogin.password\r\n            })\r\n        });\r\n\r\n        const data = await response.json();\r\n        console.log(data.body);\r\n        return {\r\n            success: data.body.success,\r\n            message: data.body.message,\r\n            user_id: data.body.user_id\r\n        };\r\n    } catch (error) {\r\n        return {\r\n            success: false,\r\n            message: 'Error connecting to Server.'\r\n        };\r\n    }\r\n}\r\n\r\nexport const appUserSignup = async (userSignup) => {\r\n    try {\r\n        const response = await fetch(`${url}/user/signup`, { \r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                name: userSignup.uname,           \r\n                username: userSignup.username,\r\n                email: userSignup.email,       \r\n                password: userSignup.password\r\n            })\r\n        });\r\n\r\n        const data = await response.json();\r\n        return {\r\n            success: data.body.success,\r\n            message: data.body.message\r\n        };\r\n    } catch (error) {\r\n        return {\r\n            success: false,\r\n            message: 'Error connecting to Server.'\r\n        };\r\n    }\r\n}\r\n\r\n\r\nexport const appDreamEntry = async (dreamData) => {\r\n    try {\r\n        const response = await fetch(`${url}/dreams/create-dream-entry`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                user_id: dreamData.user_id,          \r\n                dream_title: dreamData.dream_title,\r\n                dream_date: dreamData.dream_date,\r\n                dream_description: dreamData.dream_description,\r\n                dream_tag: dreamData.dream_tag\r\n            })\r\n        });\r\n\r\n        const data = await response.json();\r\n\r\n        return {\r\n            success: data.body.success,\r\n            message: data.body.message\r\n        };\r\n    } catch (error) {\r\n        return {\r\n            success: false,\r\n            message: 'Error connecting to Server.'\r\n        };\r\n    }\r\n}\r\n\r\nexport const getDreamLogs = async (userID) => {\r\n    try {\r\n        console.log(userID);\r\n        const response = await fetch(`${url}/dreams/view-dream-logs`, {\r\n            method: 'Post',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                user_id: userID \r\n            })\r\n        });\r\n        \r\n        const data = await response.json();\r\n\r\n        return {\r\n            dreams: data.body.dreams\r\n        };\r\n    } catch (error) {\r\n        console.log(error);\r\n        return {\r\n            dreams: []\r\n        };\r\n    }\r\n}\r\n\r\n\r\nexport const getDreamById = async (dream_id) => {\r\n    try {\r\n        const response = await fetch(`${url}/dreams/dream/${dream_id}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n\r\n        const data = await response.json();\r\n\r\n        console.log(data)\r\n\r\n        return {\r\n            dream: data.dream\r\n        };\r\n    } catch (error) {\r\n        console.log(error);\r\n        return {\r\n            event: null\r\n        };\r\n    }\r\n}\r\n\r\nexport const createEntry = async(dreamData) => {\r\n    try {\r\n        console.log(dreamData.tag)\r\n        const response = await fetch(`${url}/dreams/create-dream-entry`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                user_id: dreamData.user_id,\r\n                dream_title: dreamData.title,\r\n                dream_date: dreamData.date,\r\n                dream_description: dreamData.description,\r\n                dream_tag: dreamData.tag\r\n            })\r\n        });\r\n\r\n        const data = await response.json();\r\n        console.log(data.body);\r\n        return {\r\n            success: data.body.success,\r\n            message: data.body.message\r\n        };\r\n    } catch (error) {\r\n        return {\r\n            success: false,\r\n            message: 'Error connecting to Server.'\r\n        };\r\n    }\r\n}\r\n\r\nexport const getText = async(ImgData) => {\r\n    try {\r\n        const response = await fetch(`${url}/img-to-text`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                image: ImgData\r\n            })\r\n        });\r\n\r\n        const data = await response.json();\r\n        console.log(data.body.detectedText);\r\n        return {\r\n            text: data.body.detectedText\r\n        };\r\n    } catch (error) {\r\n        return {\r\n            success: false,\r\n            message: 'Error connecting to Server.'\r\n        };\r\n    }\r\n}\r\n\r\nexport const DesiredDateformat = (inputDate) =>{\r\n    const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n                        \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\r\n    const [year, month, day] = inputDate.split('-');\r\n\r\n    const monthName = monthNames[parseInt(month, 10) - 1];\r\n\r\n\r\n    return `${day} ${monthName} ${year}`;\r\n}\r\n\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}